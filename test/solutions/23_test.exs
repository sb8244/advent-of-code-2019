defmodule TwentyThreeTest do
  use ExUnit.Case

  @program "3,62,1001,62,11,10,109,2217,105,1,0,1685,767,1326,924,798,631,734,1823,1621,862,1726,664,2157,1165,1262,1027,955,1755,1784,1891,2087,1423,571,1557,1650,1922,829,1856,1295,1134,1196,1495,1454,1988,893,1588,1363,602,1229,1099,2017,2186,990,1951,1526,2122,1058,2052,693,1392,0,0,0,0,0,0,0,0,0,0,0,0,3,64,1008,64,-1,62,1006,62,88,1006,61,170,1106,0,73,3,65,20101,0,64,1,20101,0,66,2,21102,105,1,0,1105,1,436,1201,1,-1,64,1007,64,0,62,1005,62,73,7,64,67,62,1006,62,73,1002,64,2,132,1,132,68,132,1002,0,1,62,1001,132,1,140,8,0,65,63,2,63,62,62,1005,62,73,1002,64,2,161,1,161,68,161,1101,0,1,0,1001,161,1,169,101,0,65,0,1102,1,1,61,1101,0,0,63,7,63,67,62,1006,62,203,1002,63,2,194,1,68,194,194,1006,0,73,1001,63,1,63,1106,0,178,21101,0,210,0,106,0,69,1201,1,0,70,1102,1,0,63,7,63,71,62,1006,62,250,1002,63,2,234,1,72,234,234,4,0,101,1,234,240,4,0,4,70,1001,63,1,63,1105,1,218,1106,0,73,109,4,21102,0,1,-3,21102,1,0,-2,20207,-2,67,-1,1206,-1,293,1202,-2,2,283,101,1,283,283,1,68,283,283,22001,0,-3,-3,21201,-2,1,-2,1105,1,263,21201,-3,0,-3,109,-4,2106,0,0,109,4,21102,1,1,-3,21102,0,1,-2,20207,-2,67,-1,1206,-1,342,1202,-2,2,332,101,1,332,332,1,68,332,332,22002,0,-3,-3,21201,-2,1,-2,1105,1,312,22101,0,-3,-3,109,-4,2106,0,0,109,1,101,1,68,359,20101,0,0,1,101,3,68,366,21001,0,0,2,21101,376,0,0,1105,1,436,21202,1,1,0,109,-1,2106,0,0,1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824,2147483648,4294967296,8589934592,17179869184,34359738368,68719476736,137438953472,274877906944,549755813888,1099511627776,2199023255552,4398046511104,8796093022208,17592186044416,35184372088832,70368744177664,140737488355328,281474976710656,562949953421312,1125899906842624,109,8,21202,-6,10,-5,22207,-7,-5,-5,1205,-5,521,21102,1,0,-4,21102,0,1,-3,21101,51,0,-2,21201,-2,-1,-2,1201,-2,385,470,21002,0,1,-1,21202,-3,2,-3,22207,-7,-1,-5,1205,-5,496,21201,-3,1,-3,22102,-1,-1,-5,22201,-7,-5,-7,22207,-3,-6,-5,1205,-5,515,22102,-1,-6,-5,22201,-3,-5,-3,22201,-1,-4,-4,1205,-2,461,1106,0,547,21101,-1,0,-4,21202,-6,-1,-6,21207,-7,0,-5,1205,-5,547,22201,-7,-6,-7,21201,-4,1,-4,1106,0,529,22101,0,-4,-7,109,-8,2106,0,0,109,1,101,1,68,563,21001,0,0,0,109,-1,2106,0,0,1101,0,63277,66,1101,0,1,67,1102,598,1,68,1101,556,0,69,1102,1,1,71,1102,600,1,72,1106,0,73,1,-128,45,24982,1102,1,38783,66,1101,1,0,67,1102,1,629,68,1101,0,556,69,1101,0,0,71,1101,631,0,72,1106,0,73,1,1705,1102,1,101081,66,1102,1,2,67,1101,0,658,68,1101,302,0,69,1101,1,0,71,1101,0,662,72,1105,1,73,0,0,0,0,7,8663,1101,73951,0,66,1102,1,1,67,1101,691,0,68,1101,0,556,69,1102,0,1,71,1102,693,1,72,1106,0,73,1,1531,1101,0,21773,66,1102,1,1,67,1102,1,720,68,1102,556,1,69,1102,6,1,71,1102,1,722,72,1106,0,73,1,1,14,59174,26,175918,45,12491,43,200302,24,60986,16,71607,1101,84551,0,66,1101,0,1,67,1102,761,1,68,1101,0,556,69,1101,0,2,71,1102,763,1,72,1106,0,73,1,10,2,233564,32,49559,1101,54559,0,66,1101,0,1,67,1102,1,794,68,1101,556,0,69,1101,1,0,71,1101,796,0,72,1105,1,73,1,12611,14,29587,1101,37993,0,66,1101,1,0,67,1102,825,1,68,1102,556,1,69,1101,0,1,71,1102,1,827,72,1105,1,73,1,-467,43,100151,1102,1,87959,66,1101,0,2,67,1102,856,1,68,1102,302,1,69,1102,1,1,71,1101,0,860,72,1105,1,73,0,0,0,0,45,37473,1101,14897,0,66,1102,1,1,67,1101,0,889,68,1102,1,556,69,1101,0,1,71,1101,891,0,72,1106,0,73,1,1850,16,47738,1102,1,36887,66,1102,1,1,67,1102,1,920,68,1101,0,556,69,1102,1,1,71,1102,1,922,72,1106,0,73,1,61,43,400604,1102,31883,1,66,1102,1,1,67,1102,1,951,68,1102,1,556,69,1102,1,1,71,1102,1,953,72,1106,0,73,1,-3,20,162742,1102,23869,1,66,1102,1,3,67,1102,982,1,68,1102,1,302,69,1102,1,1,71,1102,988,1,72,1106,0,73,0,0,0,0,0,0,18,79181,1101,0,23087,66,1102,1,4,67,1102,1,1017,68,1101,253,0,69,1101,0,1,71,1101,1025,0,72,1106,0,73,0,0,0,0,0,0,0,0,30,62171,1101,0,1973,66,1102,1,1,67,1101,0,1054,68,1101,0,556,69,1101,1,0,71,1101,0,1056,72,1106,0,73,1,-6203,46,97259,1102,97259,1,66,1101,0,6,67,1101,0,1085,68,1101,302,0,69,1102,1,1,71,1101,0,1097,72,1105,1,73,0,0,0,0,0,0,0,0,0,0,0,0,42,69261,1102,1,16673,66,1101,0,1,67,1102,1,1126,68,1101,556,0,69,1101,3,0,71,1102,1,1128,72,1106,0,73,1,5,2,116782,2,175173,32,198236,1101,0,20359,66,1102,1,1,67,1102,1161,1,68,1102,1,556,69,1101,1,0,71,1101,1163,0,72,1106,0,73,1,125,2,58391,1102,38299,1,66,1101,0,1,67,1102,1192,1,68,1102,1,556,69,1102,1,1,71,1101,0,1194,72,1106,0,73,1,8231,24,30493,1101,62171,0,66,1101,2,0,67,1101,1223,0,68,1102,1,351,69,1102,1,1,71,1102,1227,1,72,1106,0,73,0,0,0,0,255,53891,1101,34877,0,66,1102,1,1,67,1101,1256,0,68,1102,1,556,69,1102,2,1,71,1101,0,1258,72,1106,0,73,1,2,32,148677,32,247795,1102,29587,1,66,1101,2,0,67,1102,1,1289,68,1101,0,302,69,1101,0,1,71,1102,1293,1,72,1106,0,73,0,0,0,0,26,87959,1102,94889,1,66,1101,1,0,67,1102,1322,1,68,1102,1,556,69,1102,1,1,71,1101,0,1324,72,1106,0,73,1,5153,16,23869,1102,1,58391,66,1102,1,4,67,1102,1353,1,68,1102,1,302,69,1102,1,1,71,1102,1361,1,72,1106,0,73,0,0,0,0,0,0,0,0,32,297354,1101,73877,0,66,1102,1,1,67,1101,1390,0,68,1101,556,0,69,1101,0,0,71,1102,1392,1,72,1105,1,73,1,1549,1101,0,56663,66,1102,1,1,67,1101,1419,0,68,1102,1,556,69,1102,1,1,71,1101,1421,0,72,1106,0,73,1,-123,24,91479,1102,1,68777,66,1101,0,1,67,1102,1450,1,68,1101,0,556,69,1102,1,1,71,1102,1452,1,72,1106,0,73,1,419,46,486295,1102,1,49559,66,1102,6,1,67,1102,1,1481,68,1102,1,302,69,1101,1,0,71,1101,1493,0,72,1106,0,73,0,0,0,0,0,0,0,0,0,0,0,0,30,124342,1102,1,1571,66,1101,0,1,67,1102,1522,1,68,1101,556,0,69,1101,1,0,71,1101,1524,0,72,1106,0,73,1,283,5,101081,1101,14087,0,66,1101,1,0,67,1102,1553,1,68,1101,0,556,69,1101,0,1,71,1101,1555,0,72,1106,0,73,1,-1664,18,237543,1101,59393,0,66,1101,1,0,67,1101,1584,0,68,1101,556,0,69,1102,1,1,71,1101,0,1586,72,1106,0,73,1,11,46,194518,1102,101293,1,66,1101,0,1,67,1102,1,1615,68,1101,556,0,69,1101,0,2,71,1102,1,1617,72,1106,0,73,1,6547,46,389036,20,244113,1101,0,53699,66,1102,1,1,67,1102,1,1648,68,1101,0,556,69,1101,0,0,71,1101,0,1650,72,1105,1,73,1,1298,1101,0,30493,66,1101,3,0,67,1102,1677,1,68,1101,302,0,69,1102,1,1,71,1101,0,1683,72,1105,1,73,0,0,0,0,0,0,18,395905,1102,53891,1,66,1101,1,0,67,1102,1,1712,68,1102,1,556,69,1102,1,6,71,1101,0,1714,72,1105,1,73,1,26306,7,17326,40,86461,40,259383,47,92557,47,185114,47,277671,1101,0,39569,66,1102,1,1,67,1101,1753,0,68,1102,1,556,69,1101,0,0,71,1101,0,1755,72,1106,0,73,1,1079,1101,87151,0,66,1102,1,1,67,1102,1782,1,68,1102,556,1,69,1101,0,0,71,1102,1784,1,72,1106,0,73,1,1982,1101,0,79181,66,1101,5,0,67,1102,1811,1,68,1101,253,0,69,1101,0,1,71,1101,1821,0,72,1106,0,73,0,0,0,0,0,0,0,0,0,0,5,202162,1101,8663,0,66,1101,0,2,67,1102,1850,1,68,1102,1,302,69,1101,0,1,71,1102,1854,1,72,1105,1,73,0,0,0,0,42,23087,1101,0,69379,66,1101,0,1,67,1102,1883,1,68,1101,556,0,69,1101,0,3,71,1101,0,1885,72,1105,1,73,1,3,46,291777,46,583554,20,81371,1101,0,50093,66,1101,0,1,67,1101,1918,0,68,1102,1,556,69,1102,1,1,71,1101,0,1920,72,1106,0,73,1,12,43,300453,1101,17981,0,66,1101,0,1,67,1102,1949,1,68,1102,1,556,69,1102,0,1,71,1102,1951,1,72,1105,1,73,1,1078,1102,100151,1,66,1101,4,0,67,1101,1978,0,68,1102,1,302,69,1102,1,1,71,1102,1,1986,72,1106,0,73,0,0,0,0,0,0,0,0,18,158362,1102,87251,1,66,1102,1,1,67,1102,2015,1,68,1102,1,556,69,1102,0,1,71,1102,2017,1,72,1106,0,73,1,1292,1101,86461,0,66,1101,3,0,67,1101,0,2044,68,1101,302,0,69,1101,0,1,71,1102,1,2050,72,1105,1,73,0,0,0,0,0,0,42,92348,1101,92557,0,66,1102,3,1,67,1102,2079,1,68,1101,0,302,69,1102,1,1,71,1101,2085,0,72,1105,1,73,0,0,0,0,0,0,42,46174,1102,1,81371,66,1102,3,1,67,1101,2114,0,68,1101,302,0,69,1102,1,1,71,1102,1,2120,72,1106,0,73,0,0,0,0,0,0,40,172922,1102,1,12491,66,1101,3,0,67,1101,2149,0,68,1102,302,1,69,1102,1,1,71,1101,0,2155,72,1106,0,73,0,0,0,0,0,0,18,316724,1102,38567,1,66,1101,0,1,67,1101,2184,0,68,1101,0,556,69,1102,1,0,71,1101,2186,0,72,1106,0,73,1,1769,1101,88853,0,66,1101,0,1,67,1102,1,2213,68,1102,556,1,69,1101,1,0,71,1102,2215,1,72,1106,0,73,1,160,32,99118"

  test "pt1" do
    Enum.map((0..49), fn id ->
      spawn(fn ->
        agent = String.to_atom("Nic.#{id}")
        {:ok, _pid} = Agent.start_link(fn -> %{output: [], id: false, inputs: []} end, name: agent)

        Process.put(:output_fn, fn int ->
          Agent.get_and_update(agent, fn m = %{output: output}->
            {ret, next_output} =
              case [int | output] do
                [y, x, to_id] ->

                  {{to_id, x, y}, []}

                next -> {nil, next}
              end

            {ret, Map.put(m, :output, next_output)}
          end)
          |> case do
            nil -> nil
            {to_id, x, y} ->
              to_agent = String.to_atom("Nic.#{to_id}")
              IO.inspect "Send #{x}, #{y} to #{to_id}"
              Agent.update(to_agent, fn m = %{inputs: inputs} ->
                inputs = inputs ++ [x, y]
                Map.put(m, :inputs, inputs)
              end)
          end
        end)

        Process.put(:input_fn, fn ->
          sent_id = Agent.get_and_update(agent, fn m = %{id: sent_id} ->
            {sent_id, Map.put(m, :id, true)}
          end)

          if sent_id do
            Agent.get_and_update(agent, fn m = %{inputs: inputs} ->
              {next, inputs} =
                case inputs do
                  [next | rest] ->
                    {next, rest}

                  [] ->
                    {-1, []}
                end

              {next, Map.put(m, :inputs, inputs)}
            end)
          else
            id
          end
        end)

        TwentyThree.computer(@program)

        IO.inspect "#{id} is done"
      end)
    end)

    Process.sleep(2_000)

    # See 24602 to 255 in output
  end

  test "pt2" do
    {:ok, nat} = Agent.start_link(fn -> {nil, MapSet.new()} end)

    Enum.map((0..49), fn id ->
      spawn(fn ->
        agent = String.to_atom("Nic2.#{id}")
        {:ok, _pid} = Agent.start_link(fn -> %{output: [], id: false, inputs: []} end, name: agent)

        Process.put(:output_fn, fn int ->
          Agent.get_and_update(agent, fn m = %{output: output}->
            {ret, next_output} =
              case [int | output] do
                [y, x, to_id] ->

                  {{to_id, x, y}, []}

                next -> {nil, next}
              end

            {ret, Map.put(m, :output, next_output)}
          end)
          |> case do
            nil -> nil
            {255, x, y} ->
              send_to_nat(nat, {x, y})

            {to_id, x, y} ->
              to_agent = String.to_atom("Nic2.#{to_id}")
              IO.inspect "Send #{x}, #{y} to #{to_id}"
              Agent.update(to_agent, fn m = %{inputs: inputs} ->
                inputs = inputs ++ [x, y]
                Map.put(m, :inputs, inputs)
              end)
          end
        end)

        Process.put(:input_fn, fn ->
          sent_id = Agent.get_and_update(agent, fn m = %{id: sent_id} ->
            {sent_id, Map.put(m, :id, true)}
          end)

          send =
            if sent_id do
              Agent.get_and_update(agent, fn m = %{inputs: inputs} ->
                {next, inputs} =
                  case inputs do
                    [next | rest] ->
                      {next, rest}

                    [] ->
                      {-1, []}
                  end

                {next, Map.put(m, :inputs, inputs)}
              end)
            else
              id
            end

          if send == -1 do
            set_idle(nat, id, true)
          else
            set_idle(nat, id, false)
          end
          # IO.inspect "Input on #{id}: #{send}"

          send
        end)

        TwentyThree.computer(@program)

        IO.inspect "#{id} is done"
      end)
    end)

    Process.sleep(2_000)

    # See 24602 to 255 in output
  end

  def set_idle(nat, id, true) do
    Agent.get_and_update(nat, fn {last, seen} ->
      {MapSet.size(seen), {last, MapSet.put(seen, id)}}
    end)
    |> case do
      50 ->
        Agent.get_and_update(nat, fn {last, seen} ->
          {last, {nil, seen}}
        end)
        |> case do
          nil -> nil
          [x, y] ->
            to_id = 0
            to_agent = String.to_atom("Nic2.#{to_id}")
            IO.inspect "Send #{x}, #{y} to #{to_id}"
            Agent.update(to_agent, fn m = %{inputs: inputs} ->
              inputs = inputs ++ [x, y]
              Map.put(m, :inputs, inputs)
            end)
        end

      _ -> nil
    end

    # Seen "19641" in output
  end

  def set_idle(nat, id, false) do
    Agent.update(nat, fn {last, seen} ->
      {last, MapSet.delete(seen, id)}
    end)
  end

  def send_to_nat(nat, {x, y}) do
    IO.inspect "Send #{x}, #{y} to NAT"
    Agent.update(nat, fn {_last, seen} ->
      {[x, y], seen}
    end)
  end
end
